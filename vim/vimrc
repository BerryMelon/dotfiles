filetype off                  " required

" Plugin management -------------------- {{{
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
" Plugins
Plugin 'tpope/vim-fugitive'
Plugin 'itchyny/lightline.vim'
Plugin 'kien/ctrlp.vim' 
Plugin 'vim-syntastic/syntastic'
Plugin 'scrooloose/nerdtree'
Plugin 'pangloss/vim-javascript'
" Plugin 'ervandew/supertab'
Plugin 'Valloric/YouCompleteMe'
Plugin 'vim-scripts/ZoomWin'
Plugin 'airblade/vim-gitgutter'
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'keith/swift.vim'
Plugin 'kballard/vim-swift'
Plugin 'rkulla/pydiction'
Plugin 'tpope/vim-surround'
Plugin 'gfontenot/vim-xcode'
Plugin 'tpope/vim-dispatch'   " Asynchronous build
call vundle#end()            " required
" }}}

set nocompatible
syntax on
set laststatus=2
set relativenumber
set number
set hlsearch
set ignorecase
set incsearch
set autoindent
set tabstop=4
set expandtab
set shiftwidth=4
set smartindent
:set tags=./tags,tags;$HOME
set foldmethod=syntax
set foldnestmax=1
set foldlevelstart=99

:if $ISLIGHT
    :set background=light
:else
    :set background=dark
:endif
colorscheme PaperColor

" Custom Mapping 
let mapleader = "-"

" Toggle background color
function! BgToggleSol()
    if $ISLIGHT
       set background=dark
       :let $ISLIGHT = 0
    else
       set background=light
       :let $ISLIGHT = 1
    endif
endfunction
nnoremap <silent> <leader>bc :call BgToggleSol()<cr>

" Vimrc launcher. ev to open vimrc sv to reload vim with vimrc
:nnoremap <leader>ev :vsplit $MYVIMRC<cr>
:nnoremap <leader>sv :source $MYVIMRC<cr>

:nnoremap <leader>n <esc>:NERDTreeToggle<cr>
:nnoremap <leader>; :execute "normal! mqA;\e`q"<cr>
" greps word under cursor
" :nnoremap <leader>g :silent execute "grep! -R " . shellescape(expand("<cWORD>")) . " ."<cr>:copen<cr>

" copy to system clipboard
:vnoremap <leader>y :'<,'>w !pbcopy<cr><cr>

autocmd FileType python nnoremap <buffer> <F9> :w<cr> :exec '!clear; python' shellescape(@%, 1)<cr>

" Statusline customization
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" Syntax related stuff
let g:javascript_plugin_jsdoc = 1
let php_folding = 1
let php_sql_query = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_swift_checkers = ['swiftpm', 'swiftlint', 'swiftc', 'swift']
let g:syntastic_python_checkers = ['python3', 'flake8', 'pycodestyle']
let g:syntastic_objc_checkers = ['gcc','oclint']

" XCode Stuff ------------------------------------
" clang_complete settings
let g:clang_library_path="/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib"
let g:clang_auto_user_options="compile_commands.json, path, .clang_complete"
let g:clang_complete_auto = 0
let g:clang_periodic_quickfix = 0
let g:clang_close_preview = 1
" For Objective-C, this needs to be active, otherwise multi-parameter methods won't be completed correctly
let g:clang_snippets = 1
let g:clang_auto_select = 1
" Snipmate does not work anymore, ultisnips is the recommended plugin
" let g:clang_snippets_engine = 'ultisnips'
" show diagnostics
let g:clang_complete_copen = 1
nnoremap <leader>c :cc<cr>

let g:ycm_semantic_triggers = {
    \ 'objc' : ['re!\@"\.*"\s',
    \ 're!\@\w+\.*\w*\s',
    \ 're!\@\(\w+\.*\w*\)\s',
    \ 're!\@\(\s*',
    \ 're!\@\[.*\]\s',
    \ 're!\@\[\s*',
    \ 're!\@\{.*\}\s',
    \ 're!\@\{\s*',
    \ "re!\@\’.*\’\s",
    \ '#ifdef ',
    \ 're!:\s*',
    \ 're!=\s*',
    \ 're!,\s*', ],
    \ }
let g:xcode_default_simulator = 'iPhone X'

" Line numbers hybrid
:augroup numbertoggle
:  autocmd!
:  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
:  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
:augroup END

" Vimscript Fold Method --------------------- {{{
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END
" }}}

" Python Document autocomplete
if has("autocmd")
    autocmd FileType python set complete+=k~/.vim/bundle/pydiction/complete-dict isk+=.,(
endif " has("autocmd"

" Others
set wildignore+=*/tmp/*,*.so,*.swp,*.zip

"CtrlP Customization
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

" Lightline customization ---------------------- {{{
let g:lightline = {
      \ 'colorscheme': 'PaperColor',
      \ 'mode_map': { 'c': 'NORMAL' },
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
      \ },
      \ 'component_function': {
      \   'modified': 'LightLineModified',
      \   'readonly': 'LightLineReadonly',
      \   'fugitive': 'LightLineFugitive',
      \   'filename': 'LightLineFilename',
      \   'fileformat': 'LightLineFileformat',
      \   'filetype': 'LightLineFiletype',
      \   'fileencoding': 'LightLineFileencoding',
      \   'mode': 'LightLineMode',
      \ },
      \ 'separator': { 'left': '⮀', 'right': '⮂' },
      \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
      \ }

function! LightLineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '⭤' : ''
endfunction

function! LightLineFilename()
  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
    let _ = fugitive#head()
    return strlen(_) ? '⭠ '._ : ''
  endif
  return ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction
" Lightline customization end }}}
