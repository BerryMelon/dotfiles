filetype off                  " required

" Plugin management -------------------- {{{
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
" -----> Plugins
Plugin 'tpope/vim-fugitive'
Plugin 'itchyny/lightline.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'preservim/nerdtree'
Plugin 'pangloss/vim-javascript'
Plugin 'vim-scripts/ZoomWin'
Plugin 'airblade/vim-gitgutter'
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-dispatch'
call vundle#end()            " required
" }}}

set nocompatible
syntax on
set laststatus=2
set relativenumber
set number
set hlsearch
set ignorecase
set incsearch
set autoindent
set tabstop=4
set expandtab
set shiftwidth=4
set smartindent
set tags=./tags,tags;$HOME
set foldmethod=syntax
set foldnestmax=1
set foldlevelstart=99

if &ft == 'python'
    set foldmethod=indent
endif

if $ISLIGHT
    set background=light
else
    set background=dark
endif
colorscheme PaperColor

" Custom Mapping 
let mapleader = "-"

" Toggle background color
function! BgToggleSol()
    if $ISLIGHT
        set background=dark
        let $ISLIGHT = 0
    else
        set background=light
        let $ISLIGHT = 1
    endif
endfunction
nnoremap <silent> <leader>bc :call BgToggleSol()<cr>

" Vimrc launcher. ev to open vimrc sv to reload vim with vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Window navigation
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

nnoremap <leader>nn <esc>:NERDTreeToggle<cr>
nnoremap <leader>nr <esc>:NERDTree<cr>
nnoremap <leader>; :execute "normal! mqA;\e`q"<cr>
nnoremap <leader>d :YcmCompleter GetDoc<cr>
" greps word under cursor
nnoremap <leader>g :silent execute "grep! -R " . shellescape(expand("<cWORD>")) . " ."<cr>:copen<cr>

" Check if Vim has clipboard support
if has('clipboard')
    " Vim has clipboard support, use the built-in clipboard registers
    vnoremap <leader>y "+y
    nnoremap <leader>p "+p
else
    " Vim does not have clipboard support, use system commands (example for macOS)
    vnoremap <leader>y :'<,'>w !pbcopy<cr><cr>
    nnoremap <leader>p :set paste<CR>:r !pbpaste<CR>:set nopaste<CR>
endif

" easy navigation
nnoremap H <C-w>h
nnoremap L <C-w>l
nnoremap J <C-d>zz
nnoremap K <C-u>zz

" run python while in vim
autocmd FileType python nnoremap <leader>r :w<cr> :exec '!clear; python' shellescape(@%, 1)<cr>

" Statusline customization
set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%{FugitiveStatusline()}
set statusline+=%*

" Syntax related stuff
let g:javascript_plugin_jsdoc = 1
let php_folding = 1
let php_sql_query = 1

" Line numbers hybrid
augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" Vimscript Fold Method --------------------- {{{
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END
" }}}

" Python Document autocomplete
if has("autocmd")
    autocmd FileType python setlocal complete+=k~/.vim/bundle/pydiction/complete-dict isk+=.,(
endif

" Others
set wildignore+=*/tmp/*,*.so,*.swp,*.zip

"CtrlP Customization
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn)$',
      \ 'file': '\v\.(exe|so|dll)$',
      \ 'link': 'some_bad_symbolic_links',
      \ }

" Lightline customization ---------------------- {{{
let g:lightline = {
      \ 'colorscheme': 'PaperColor',
      \ 'mode_map': { 'c': 'NORMAL' },
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
      \ },
      \ 'component_function': {
      \   'modified': 'LightLineModified',
      \   'readonly': 'LightLineReadonly',
      \   'fugitive': 'LightLineFugitive',
      \   'filename': 'LightLineFilename',
      \   'fileformat': 'LightLineFileformat',
      \   'filetype': 'LightLineFiletype',
      \   'fileencoding': 'LightLineFileencoding',
      \   'mode': 'LightLineMode',
      \ },
      \ 'separator': { 'left': '⮀', 'right': '⮂' },
      \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
      \ }

function! LightLineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '⭤' : ''
endfunction

function! LightLineFilename()
  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
    let _ = fugitive#head()
    return strlen(_) ? '⭠ '._ : ''
  endif
  return ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction
" Lightline customization end }}}

